{"version":3,"sources":["CryptoList.js","Crypto.js","Coin.js","App.js","serviceWorker.js","index.js"],"names":["CryptoList","props","currencyList","cryptoArray","map","currency","index","arrow","class","String","fromCharCode","key","className","last","symbol","Crypto","filterCurrency","trimValue","inputFilter","value","trim","toUpperCase","console","log","filteredCurrency","state","filter","thisCurrencyList","includes","setState","filteredCurrencyList","getCurrencyData","axios","get","then","res","currencies","data","curriencesArr","i","newCurrency","prevCurrency","undefined","push","this","timer","setInterval","type","placeholder","onChange","ref","input","Component","Coin","icon","style","color","spin","library","add","faBitcoin","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qSA4BeA,EA1BI,SAAAC,GAGhB,IAAIC,EAAeD,EAAME,YAAYC,KAAI,SAACC,EAAUC,GAChD,IAAIC,EAAQ,GAWZ,OATCA,EADqB,UAAnBF,EAASG,MACHC,OAAOC,aAAa,MACA,QAAnBL,EAASG,MACVC,OAAOC,aAAa,MAEpBD,OAAOC,aAAa,MAMzB,wBAAIC,IAAKL,GAAT,cAA2B,0BAAMM,UAAWP,EAASG,OAAQH,EAASQ,KAA3C,IAAkDN,EAAlD,KAAiEF,EAASA,SAArG,IAAgHA,EAASS,OAAzH,QAGP,OAEQ,wBAAIF,UAAU,eAAeV,I,iBCmE1Ba,E,YAlFX,aAAe,IAAD,8BACV,+CASJC,eAAiB,WAEb,IAAIC,EAAY,EAAKC,YAAYC,MAAMC,OAAOC,cAC9CC,QAAQC,IAAIN,GACZ,IACIO,EADmB,EAAKC,MAAMvB,aACMwB,QAAO,SAAAC,GAC3C,OAAOA,EAAiBtB,SAASuB,SAASX,MAE9CK,QAAQC,IAAIC,GAEZ,EAAKK,SAAS,CAACC,qBAAsBN,KApB3B,EA0BdO,gBAAkB,WACdT,QAAQC,IAAI,cACZS,IAAMC,IAAN,qCACCC,MAAK,SAAAC,GACH,IAAIC,EAAaD,EAAIE,KACfC,EAAgB,GAClBC,EAAI,EACR,IAAI,IAAI5B,KAAOyB,EAAY,CAC1B,IAAII,EAAcJ,EAAWzB,GACrB8B,EAAe,EAAKhB,MAAMvB,aAAaqC,GAC3CjB,QAAQC,IAAIkB,QAEQC,IAAjBD,EACQA,EAAa5B,KAAK2B,EAAY3B,KACjC2B,EAAYhC,MAAQ,MACViC,EAAa5B,KAAK2B,EAAY3B,KACpC2B,EAAYhC,MAAO,QAEnBgC,EAAYhC,MAAO,OAG3BgC,EAAYhC,MAAQ,OAG1BgC,EAAYnC,SAAWM,EACvB2B,EAAcK,KAAKH,GACnBD,IAIH,EAAKV,SAAU,CAAC3B,aAAaoC,EAAeR,qBAAqBQ,IACjE,EAAKtB,qBAtDR,EAAKS,MAAQ,CACTvB,aAAc,GACd4B,qBAAsB,IALhB,E,iFA6DO,IAAD,OACdc,KAAKb,kBACLa,KAAKC,MAAQC,aAAY,kBAAI,EAAKf,oBAAmB,O,+BAIjD,IAAD,OACL,OACI,6BACI,6BACI,yBAAKnB,UAAU,aACX,2BAAOmC,KAAK,OAAOnC,UAAU,QAAQoC,YAAY,UAAUC,SAAUL,KAAK5B,eAAgBkC,IAAK,SAAAC,GAAK,OAAE,EAAKjC,YAAciC,MAG7H,kBAAC,EAAD,CAAYhD,YAAayC,KAAKnB,MAAMK,6B,GA5EnCsB,a,uBCQNC,EAZF,kBACT,yBAAKzC,UAAU,QAEX,yBAAKA,UAAU,QAEV,kBAAC,IAAD,CAAiB0C,KAAM,CAAC,MAAO,WAAYC,MAAO,CAACC,MAAO,WAAaC,MAAI,KAGhF,6CCFRC,IAAQC,IAAIC,KAcGC,MAZf,WACE,OACE,yBAAKjD,UAAU,OACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,YAEb,kBAAC,EAAD,SCLYkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,MAAK,SAAAwC,GACjCA,EAAaC,kB","file":"static/js/main.5830dd8e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CryptoList = props => {\r\n\r\n   \r\n   let currencyList = props.cryptoArray.map((currency, index) => {\r\n       let arrow = '';\r\n       if(currency.class === 'green') {\r\n        arrow = String.fromCharCode(8593) //&uarr;\r\n       } else if(currency.class === 'red') {\r\n        arrow = String.fromCharCode(8595) //&darr;\r\n       } else {\r\n        arrow = String.fromCharCode(8596) //&harr;\r\n       }\r\n\r\n\r\n\r\n       return (\r\n           <li key={index}>Last rate: <span className={currency.class}>{currency.last} {arrow} </span>{currency.currency} {currency.symbol} </li>\r\n       );\r\n   })\r\n    return( \r\n        \r\n            <ul className=\"crypto-list\">{currencyList}</ul>\r\n       \r\n    ); \r\n};\r\n\r\nexport default CryptoList;","import React, {Component} from 'react';\r\nimport Cryptolist from './CryptoList';\r\nimport axios from 'axios';\r\n\r\n\r\n\r\n\r\nclass Crypto extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            currencyList: [],\r\n            filteredCurrencyList: []\r\n        }\r\n        \r\n    }\r\n\r\n    filterCurrency = () => {    \r\n        \r\n        let trimValue = this.inputFilter.value.trim().toUpperCase(); \r\n        console.log(trimValue);\r\n        let thisCurrencyList = this.state.currencyList;\r\n        let filteredCurrency = thisCurrencyList.filter(thisCurrencyList => {\r\n            return thisCurrencyList.currency.includes(trimValue);\r\n        })\r\n        console.log(filteredCurrency);\r\n\r\n        this.setState({filteredCurrencyList: filteredCurrency, });\r\n        \r\n    \r\n    }\r\n\r\n\r\n    getCurrencyData = () => {\r\n        console.log('pobieranie');\r\n        axios.get(`https://blockchain.info/pl/ticker`)\r\n        .then(res => {\r\n           let currencies = res.data;  \r\n           const curriencesArr = [] \r\n           let i = 0;           \r\n           for(let key in currencies) { \r\n            let newCurrency = currencies[key]; \r\n                let prevCurrency = this.state.currencyList[i];\r\n                console.log(prevCurrency);\r\n                \r\n                if(prevCurrency !== undefined){ \r\n                        if(prevCurrency.last>newCurrency.last) { \r\n                        newCurrency.class = 'red'    \r\n                        } else if(prevCurrency.last<newCurrency.last) {\r\n                            newCurrency.class ='green' \r\n                        } else {    \r\n                            newCurrency.class ='blue'\r\n                        }\r\n                } else {\r\n                    newCurrency.class = 'blue';    \r\n                }\r\n\r\n              newCurrency.currency = key;\r\n              curriencesArr.push(newCurrency);\r\n              i++;\r\n           }\r\n          \r\n\r\n           this.setState( {currencyList:curriencesArr, filteredCurrencyList:curriencesArr} );   \r\n           this.filterCurrency();\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n          this.getCurrencyData();\r\n          this.timer = setInterval(()=>this.getCurrencyData(), 5000);\r\n          \r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>              \r\n                    <div className=\"div-input\">\r\n                        <input type=\"text\" className='input' placeholder=\"Filtruj\" onChange={this.filterCurrency} ref={input=>this.inputFilter = input}></input>\r\n                        </div>\r\n\r\n                    <Cryptolist cryptoArray={this.state.filteredCurrencyList} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Crypto;","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst Coin = () => (\r\n    <div className=\"coin\">\r\n        \r\n        <div className=\"icon\">\r\n            \r\n             <FontAwesomeIcon icon={['fab', 'bitcoin']} style={{color: '#FFD700' }} spin />\r\n             \r\n        </div>\r\n        <p>Bitcoin rate</p>\r\n    </div>\r\n)\r\n\r\nexport default Coin;","import React from 'react';\nimport './App.css';\nimport Crypto from './Crypto';\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faBitcoin } from '@fortawesome/free-brands-svg-icons';\nimport Coin from './Coin'\n\n\n\nlibrary.add(faBitcoin);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Coin/>\n      <div className=\"bit-coin\">\n      \n        <Crypto />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}